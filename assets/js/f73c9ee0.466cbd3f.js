"use strict";(self.webpackChunkgetstart=self.webpackChunkgetstart||[]).push([[839],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2831:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={id:"traefik",title:"Traefik Proxy",sidebar_label:"Traefik",slug:"/stack/traefik",tags:["docker swarm","stack"]},s=void 0,i={unversionedId:"stack/traefik/traefik",id:"stack/traefik/traefik",title:"Traefik Proxy",description:"Already deployed:",source:"@site/docs-docker-swarm/stack/traefik/traefik-stack.md",sourceDirName:"stack/traefik",slug:"/stack/traefik",permalink:"/getstart/docker-swarm/stack/traefik",draft:!1,tags:[{label:"docker swarm",permalink:"/getstart/docker-swarm/tags/docker-swarm"},{label:"stack",permalink:"/getstart/docker-swarm/tags/stack"}],version:"current",lastUpdatedBy:"imoize",lastUpdatedAt:1691211684,formattedLastUpdatedAt:"Aug 5, 2023",frontMatter:{id:"traefik",title:"Traefik Proxy",sidebar_label:"Traefik",slug:"/stack/traefik",tags:["docker swarm","stack"]},sidebar:"tutorialSidebar",previous:{title:"Portainer",permalink:"/getstart/docker-swarm/stack/portainer"},next:{title:"Custom Error Pages",permalink:"/getstart/docker-swarm/stack/traefik/custom-traefik-error-pages"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Create Docker Network",id:"create-docker-network",level:3},{value:"Create Persistent Volume",id:"create-persistent-volume",level:3},{value:"Cloudflare API",id:"cloudflare-api",level:3},{value:"Traefik Static Configuration",id:"traefik-static-configuration",level:3},{value:"Traefik Dynamic Configuration",id:"traefik-dynamic-configuration",level:3},{value:"Stack",id:"stack",level:3},{value:"Deploy Services",id:"deploy-services",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Prereq",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Already deployed:"),(0,a.kt)("p",{parentName:"admonition"},"\u2705 Docker ",(0,a.kt)("a",{parentName:"p",href:"/getstart/docker-swarm/swarm-mode"},"swarm cluster")," with persistent ",(0,a.kt)("a",{parentName:"p",href:"/getstart/docker-swarm/shared-storage"},"shared storage"))),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("h3",{id:"create-docker-network"},"Create Docker Network"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker network create -d overlay --attachable --subnet=172.20.0.0/16 traefik_proxy\n")),(0,a.kt)("p",null,"Subnet is Optional, you can define ip or not."),(0,a.kt)("h3",{id:"create-persistent-volume"},"Create Persistent Volume"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mkdir -p /var/data/traefik/{log,config,certs}\ncd /var/data/traefik\n")),(0,a.kt)("p",null,"Docker won't start a service with a bind-mount to a non-existent file, so prepare an empty acme.json and .log file (with the appropriate permissions) by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo touch certs/acme.json\nsudo touch log/{traefik.log,access.log}\nsudo chmod 600 certs/acme.json\nsudo chmod 600 log/*.log\n")),(0,a.kt)("h3",{id:"cloudflare-api"},"Cloudflare API"),(0,a.kt)("p",null,"To get your API token, visit ",(0,a.kt)("a",{parentName:"p",href:"https://dash.cloudflare.com/profile/api-tokens"},"Cloudflare"),", go to My Profile, select API tokens and then choose Create Token.\nUse the template Edit zone DNS.\nChange to the following settings, click Continue to Summary and then Create Token."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Zone - DNS - Edit"),(0,a.kt)("li",{parentName:"ul"},"Zone - Zone - Read"),(0,a.kt)("li",{parentName:"ul"},"Zone - Zone Settings - Read"),(0,a.kt)("li",{parentName:"ul"},"Zone Resources - Include - All Zones")),(0,a.kt)("h3",{id:"traefik-static-configuration"},"Traefik Static Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo micro config/traefik.yaml\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'global:\n  checkNewVersion: true\n  sendAnonymousUsage: false  # true by default\n\nlog:\n  level: INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL\n  format: common  # common, json, logfmt\n  filePath: /var/log/traefik/traefik.log\n\naccesslog:\n  format: common  # common, json, logfmt\n  filePath: /var/log/traefik/access.log\n\napi:\n  dashboard: true  # true by default\n  # insecure: true  # Don\'t do this in production!\n\n# Bypass TLS Verivy to container if using https scheme\n# serversTransport:\n#   insecureSkipVerify: true\n\nentryPoints:\n  http:\n    address: :80\n    forwardedHeaders:\n      trustedIPs: &trustedIps\n        # Clouflare public IP list for HTTP requests.\n        - 172.19.0.0/16 #ADD YOUR DOCKER NETWORK HERE!!!\n        - 173.245.48.0/20\n        - 103.21.244.0/22\n        - 103.22.200.0/22\n        - 103.31.4.0/22\n        - 141.101.64.0/18\n        - 108.162.192.0/18\n        - 190.93.240.0/20\n        - 188.114.96.0/20\n        - 197.234.240.0/22\n        - 198.41.128.0/17\n        - 162.158.0.0/15\n        - 104.16.0.0/13\n        - 104.24.0.0/14\n        - 172.64.0.0/13\n        - 131.0.72.0/22\n        - 2400:cb00::/32\n        - 2606:4700::/32\n        - 2803:f800::/32\n        - 2405:b500::/32\n        - 2405:8100::/32\n        - 2a06:98c0::/29\n        - 2c0f:f248::/32\n    # (Optional) Redirect to HTTPS\n    http:\n      redirections:\n        entryPoint:\n          to: websecure\n          scheme: https\n      middlewares:\n        - securityHeaders@file\n\n  https:\n    address: :443\n    forwardedHeaders:\n      trustedIPs: *trustedIps\n    http:\n      tls:\n        # Generate a wildcard domain certificate\n        certResolver: cloudflare\n        domains:\n          - main: yourdomain.com\n            sans:\n              - \'*.yourdomain.com\'\n      middlewares:\n        - securityHeaders@file\n\n# Configure CertificateResolver\ncertificatesResolvers:\n  cloudflare:\n    acme:\n      email: email@example.com\n      storage: /acme.json\n      dnsChallenge:\n        provider: cloudflare\n        # Used to make sure the dns challenge is propagated to the rights dns servers\n        resolvers:\n          - "1.1.1.1:53"\n          - "1.0.0.1:53"\n\nproviders:\n  docker:\n    exposedByDefault: false  # Default is true\n    endpoint: "unix:///var/run/docker.sock"\n    swarmMode: true\n    watch: true\n  file:\n    # watch for dynamic configuration changes\n    filename: /etc/traefik/config.yaml\n    watch: true\n')),(0,a.kt)("h3",{id:"traefik-dynamic-configuration"},"Traefik Dynamic Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo micro config/config.yaml\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'http:\n\n  ## EXTERNAL ROUTING EXAMPLE - Only use if you want to proxy something manually ##\n  routers:\n    # Homeassistant routing example - Remove if not used\n    homeassistant:\n      entryPoints:\n        - https\n      rule: \'Host(`homeassistant.domain.com`)\'\n      service: homeassistant\n      middlewares:\n        - "auth"  \n  ## SERVICES EXAMPLE ##\n  services:\n    # Homeassistant service example - Remove if not used\n    homeassistant:\n      loadBalancer:\n        servers:\n          - url: http://192.168.0.5:8123/\n\n  ## MIDDLEWARES ##\n  middlewares:\n    # Only Allow Local networks\n    local-ipwhitelist:\n      ipWhiteList:\n        sourceRange: \n          - 127.0.0.1/32 # localhost\n          - 192.168.1.1/24 # LAN Subnet\n  \n    # Authelia guard\n    authelia:\n      forwardauth:\n        address: http://authelia_auth:9091/api/verify?rd=https://auth.domain.com/ # replace auth with your authelia service name\n        trustForwardHeader: true\n        authResponseHeaders:\n          - Remote-User\n          - Remote-Groups\n          - Remote-Name\n          - Remote-Email\n  \n    # Authelia basic auth guard\n    authelia-basic:\n      forwardauth:\n        address: http://authelia_auth:9091/api/verify?auth=basic # replace auth with your authelia service name\n        trustForwardHeader: true\n        authResponseHeaders:\n          - Remote-User\n          - Remote-Groups\n          - Remote-Name\n          - Remote-Email\n\n    # Security headers\n    securityHeaders:\n      headers:\n        customResponseHeaders:\n          X-Robots-Tag: "none,noarchive,nosnippet,notranslate,noimageindex"\n          server: ""\n          X-Forwarded-Proto: "https"\n        sslProxyHeaders:\n          X-Forwarded-Proto: https\n        referrerPolicy: "strict-origin-when-cross-origin"\n        hostsProxyHeaders:\n          - "X-Forwarded-Host"\n        customRequestHeaders:\n          X-Forwarded-Proto: "https"\n        contentTypeNosniff: true\n        browserXssFilter: true\n        forceSTSHeader: true\n        stsIncludeSubdomains: true\n        stsSeconds: 63072000\n        stsPreload: true\n\n# Only use secure ciphers - https://ssl-config.mozilla.org/#server=traefik&version=2.6.0&config=intermediate&guideline=5.6\ntls:\n  # stores:\n  #   default:\n  #     defaultCertificate:\n  #       certFile: /etc/traefik/certs/cert.pem\n  #       keyFile: /etc/traefik/certs/cert-key.pem\n  options:\n    default:\n      minVersion: VersionTLS12\n      cipherSuites:\n        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\n        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\n')),(0,a.kt)("h3",{id:"stack"},"Stack"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo micro traefik-stack.yaml\n")),(0,a.kt)("admonition",{title:"NOTE",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Put your Cloudflare email and already generated API token in environment section.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3.9"\n\nservices:\n  proxy:\n    image: traefik:latest\n    ports:\n      - target: 80\n        published: 80\n        protocol: tcp\n        mode: host\n      - target: 443\n        published: 443\n        protocol: tcp\n        mode: host\n      # Uncomment if expose dashboard to internal ip.\n      # - target: 8080\n      #   published: 8080\n      #   protocol: tcp\n      #   mode: host\n    environment:\n      - TZ=Asia/Jakarta\n      - CF_API_EMAIL=email@example.com\n      - CF_DNS_API_TOKEN=YOUR_SUPER_SECURE_CLOUDFLARE_API_TOKEN\n    networks:\n      - traefik_proxy\n    volumes:\n      - /var/data/traefik/config:/etc/traefik/\n      - /var/data/traefik/log:/var/log/traefik/\n      - /var/data/traefik/certs/acme.json:/acme.json\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    deploy:\n      mode: global\n      labels:\n        - "traefik.enable=true"\n        - "traefik.docker.network=traefik_proxy"\n        - "traefik.http.routers.api.rule=Host(`traefik.example.com`)"\n        - "traefik.http.routers.api.entrypoints=https"\n        - "traefik.http.routers.api.service=api@internal"\n        - "traefik.http.routers.api.middlewares=authelia@file"\n        - "traefik.http.services.api.loadbalancer.server.port=9999"\n        - "traefik.http.services.api.loadbalancer.server.scheme=https"\n      placement:\n        constraints: [node.role == manager]\n\nnetworks:\n  traefik_proxy:\n    external: true\n')),(0,a.kt)("h3",{id:"deploy-services"},"Deploy Services"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker stack deploy traefik -c traefik-stack.yaml\n")))}p.isMDXComponent=!0}}]);